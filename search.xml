<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>伪数组转数组的方法</title>
      <link href="/uncategorized/20230510/2223618798/"/>
      <url>/uncategorized/20230510/2223618798/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>考察知识点：</p><ul><li>数组的方法和原型链：Array.prototype上的slice、splice和concat方法</li><li>修改this指向的apply，call</li><li>es6的语法Array.from 和 展开运算符</li></ul><h4 id="1-slice">1. slice</h4><h6 id="基础语法">基础语法</h6><p>slice()方法返回一个新的数组对象，这一对象是一个有begin和end决定的原数组的浅拷贝（包括begin，不包括end），原始数据不会发生变化。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br></pre></td></tr></table></figure><h6 id="转化类数组">转化类数组</h6><p>函数的实参集合就是类数组的例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(&#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">3</span>,<span class="number">4</span>:<span class="number">4</span>,<span class="attr">length</span>:<span class="number">5</span>&#125;)</span><br><span class="line">结果：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">[].<span class="property">slice</span>.<span class="title function_">call</span>(&#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">3</span>,<span class="number">4</span>:<span class="number">4</span>,<span class="attr">length</span>:<span class="number">5</span>&#125;)</span><br><span class="line">结果：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数二是start 参数三是end [start,end)</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(&#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">3</span>,<span class="number">4</span>:<span class="number">4</span>,<span class="attr">length</span>:<span class="number">5</span>&#125;,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h4 id="2-splice">2.splice</h4><h6 id="基础语法-v2">基础语法</h6><p>splice()方法通过删除或替换现有元素或者添加新的元素来修改数组，并以数组的形式返回新的数组，会改变原数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;June&#x27;]</span></span><br><span class="line"></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="转化类数组-v2">转化类数组</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>.<span class="title function_">call</span>(&#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;,<span class="number">0</span>);</span><br><span class="line">结果：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>.<span class="title function_">call</span>(&#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">3</span>,<span class="number">4</span>:<span class="number">4</span>,<span class="attr">length</span>:<span class="number">5</span>&#125;,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="3-concat">3.concat</h4><h6 id="基本语法">基本语法</h6><p>concat()方法用于合并俩个或多个数组，不会更改原数组，而是返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">concat</span>([<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">concat</span>( [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="comment">// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">concat</span>(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// results in [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h6 id="转化类数组-v3">转化类数组</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], &#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="attr">length</span>:<span class="number">3</span>&#125;);</span><br><span class="line">结果：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">等价于：</span><br><span class="line">[].<span class="title function_">concat</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="ES6-Array-from">ES6 Array.from</h4><p>Array.from()方法从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。</p><ul><li>伪数组对象（拥有一个length属性和若干索引属性的任意对象）</li><li>可迭代对象（可以获取对象中的元素，如Map和Set等）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;foo&#x27;</span>); </span><br><span class="line">转化数组：[<span class="string">&quot;f&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">window</span>]); </span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(s); </span><br><span class="line">转化set：[<span class="string">&quot;foo&quot;</span>, <span class="variable language_">window</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]);</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(m); </span><br><span class="line">转化map：[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">转化<span class="title class_">Array</span>-like： [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>Array.from的方便之处是它的第二个参数可以设置一个函数，新数组中的每个元素会执行该函数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x);  </span><br><span class="line">结果：[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;<span class="attr">length</span>: <span class="number">5</span>&#125;, <span class="function">(<span class="params">v, i</span>) =&gt;</span> i);</span><br><span class="line">结果： [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h6 id="数组合并去重">数组合并去重</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="comment">//Array-like to Array</span></span><br><span class="line">    <span class="keyword">let</span> arr = [].<span class="property">concat</span>.<span class="title function_">apply</span>([], <span class="variable language_">arguments</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], n = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], k = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>]; </span><br><span class="line"><span class="title function_">combine</span>(m,n)                </span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="title function_">combine</span>(m,n,k)</span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组排序</title>
      <link href="/uncategorized/20230425/1189039089/"/>
      <url>/uncategorized/20230425/1189039089/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="方法一：冒泡排序">方法一：冒泡排序</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbingSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// 外层循环控制比较轮数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环控制的每一轮比较的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 依次比较前后俩个数的大小</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 利用数组解构的方式交换数组中俩个数的位置</span></span><br><span class="line">                [arr[j],arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>],arr[j]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bubbingSort</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="方法二：选择排序">方法二：选择排序</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择排序：假设第一项是最小数，将第一项依次和后面的数比较大小，如果遇到比第一项小的数，将那一项的下标记录下来，交换第一项和那一项的位置</span></span><br><span class="line"><span class="comment">// 然后假设第二项是最小数，和上面的比较方法一样，依次类推</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果找到的较小数的下标和原先记录的下标不一致，再交换位置</span></span><br><span class="line">        <span class="keyword">if</span>(minIndex !== i) &#123;</span><br><span class="line">            [arr[minIndex],arr[j]] = [arr[j],arr[minIndex]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">selectSort</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="方法三：插入排序">方法三：插入排序</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入排序: 从左向右将数据依次和它左侧已经排好的数据进行比较，将数据插到指定位置</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// 外层循环从第二项开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 把待插入的数据临时保存一下</span></span><br><span class="line">        <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">        <span class="keyword">let</span> j;</span><br><span class="line">        <span class="comment">// 将带插入的数据和前面已经排好的数据进行比较</span></span><br><span class="line">        <span class="keyword">for</span>(j = i-<span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]; j--) &#123;</span><br><span class="line">            <span class="comment">// 将较大的数往后移一位</span></span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">insertSort</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="方法四：快速排序">方法四：快速排序</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序，效率较高</span></span><br><span class="line"><span class="comment">// 1. j作为右侧移动的指针，从右往左找比基准数小的，如果找到，j停下</span></span><br><span class="line"><span class="comment">// 2. i作为左侧移动的指针，从左往右找比基准数大的，如果找到，i停下</span></span><br><span class="line"><span class="comment">// ij停下之后，交换ij位置的数据</span></span><br><span class="line"><span class="comment">// 一旦ij相遇，则停止，将ij左侧和右侧又作为一个单独的数据组，重复上面的排序方式</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr,left,right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 左侧移动的指针</span></span><br><span class="line">    <span class="keyword">let</span> i = left;</span><br><span class="line">    <span class="comment">// 右侧移动的指针</span></span><br><span class="line">    <span class="keyword">let</span> j = right;</span><br><span class="line">    <span class="comment">// 基准数（基准点。支点）</span></span><br><span class="line">    <span class="keyword">let</span> base = arr[left]</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="comment">// 从右从左找比base小的数据，找到停</span></span><br><span class="line">        <span class="keyword">while</span>(arr[j] &gt;= base &amp;&amp; i &lt; j) &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从左往右找比base大的数据，找到停</span></span><br><span class="line">        <span class="keyword">while</span>(arr[i] &lt;= base &amp;&amp; i &lt; j) &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到，交换俩个数的位置</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) &#123;</span><br><span class="line">            [arr[i],arr[j]] = [arr[j],arr[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// while循环结束，找到了基准数的位置，此时i和j相等</span></span><br><span class="line">    <span class="comment">// 把base和当前i（j）位置的数据交换</span></span><br><span class="line">    arr[left] = arr[i]</span><br><span class="line">    arr[i] = base</span><br><span class="line">    <span class="comment">// i位置左边的所有数据，重复上诉步骤</span></span><br><span class="line">    <span class="title function_">quickSort</span>(arr,left,i-<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// i位置右侧的所有数据，重复上述步骤</span></span><br><span class="line">    <span class="title function_">quickSort</span>(arr,i+<span class="number">1</span>,right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">quickSort</span>(arr,<span class="number">0</span>,arr.<span class="property">length</span>-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm的简介、安装、使用</title>
      <link href="/uncategorized/20220623/a2c9988c/"/>
      <url>/uncategorized/20220623/a2c9988c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><h4 id="nvm是什么？">nvm是什么？</h4></blockquote><p>nvm是一个node的版本管理工具，可以简单的操作node版本的切换，安装、查看…，与npm不同的是，npm是依赖包的管理工具</p><blockquote><h4 id="nvm的安装">nvm的安装</h4></blockquote><ol><li><p>下载路径：[<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a>]:</p></li><li><p>配置环境变量</p></li></ol><p><img src="/uncategorized/20220623/a2c9988c/5153ed11090b4f4db700b6cacb029134.png" alt></p><p>点击系统变量的Path</p><p><img src="/uncategorized/20220623/a2c9988c/5083a0ac725d45c695d1af3403ab2950.png" alt></p><ol start="3"><li>找到nvm文件位置，点开setting</li></ol><p><img src="/uncategorized/20220623/a2c9988c/2022-06-23_16-11-42.png" alt></p><p>打开文件，添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><blockquote><h4 id="nvm的使用">nvm的使用</h4></blockquote><ol><li><p>先卸载之前的node.js</p></li><li><p>在nvm文件位置打开cmd</p></li><li><p>输入以下代码查看nvm可安装的node版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls                      // 看安装的所有node.js的版本</span><br><span class="line"> </span><br><span class="line">nvm list available          // 查显示可以安装的所有node.js的版本</span><br></pre></td></tr></table></figure></li><li><p>安装对应版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 版本号</span><br></pre></td></tr></table></figure></li><li><p>切换版本号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 版本号</span><br></pre></td></tr></table></figure></li><li><p>检测是否成功,新开一个cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li></ol><blockquote><h4 id="nvm的一些命令">nvm的一些命令</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list 查看已经安装的版本</span><br><span class="line">nvm list installed 查看已经安装的版本</span><br><span class="line">nvm list available 查看网络可以安装的版本</span><br><span class="line">nvm install &lt;version&gt;  安装指定版本node</span><br><span class="line">nvm use &lt;version&gt;  切换使用指定的版本node</span><br><span class="line">nvm ls 列出所有版本</span><br><span class="line">nvm current 显示当前版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; 删除已定义的别名</span><br><span class="line">nvm uninstall &lt;version&gt; 卸载制定的版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在uni-app项目中使用mixins</title>
      <link href="/uncategorized/20220620/b9ca7e32/"/>
      <url>/uncategorized/20220620/b9ca7e32/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="情景：购物车右上角的徽标，在每个tabbar页面都需要展示">情景：购物车右上角的徽标，在每个tabbar页面都需要展示</h4><p><img src="/uncategorized/20220620/b9ca7e32/2022-06-20_17-18-42.png" alt></p><h4 id="解决方案：使用vue提供的mixins特性，调高代码的可维护性">解决方案：使用vue提供的mixins特性，调高代码的可维护性</h4><h4 id="具体实施：">具体实施：</h4><ol><li><p>在项目根目录下创建mixins文件夹，文件夹里创建mixins.js文件</p><p><img src="/uncategorized/20220620/b9ca7e32/2022-06-20_17-21-43.png" alt></p></li><li><p>cart模块的vuex代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>(&#123;</span><br><span class="line">        <span class="attr">cartList</span>:<span class="title class_">JSON</span>.<span class="title function_">parse</span>(uni.<span class="title function_">getStorage</span>(<span class="string">&#x27;cartlist&#x27;</span>) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">total</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">            state.<span class="property">cartList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>sum+=item.<span class="property">goods_count</span>)</span><br><span class="line">            <span class="keyword">return</span> sum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mixins.js文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">        ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;cart&#x27;</span>,[<span class="string">&#x27;total&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">setTabBarBadge</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// uni-app内置方法，设置tabbar右上角的徽标</span></span><br><span class="line">            uni.<span class="title function_">setTabBarBadge</span>(&#123;</span><br><span class="line">                <span class="comment">// index属性，表示tabbar的下标</span></span><br><span class="line">                <span class="attr">index</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="comment">// text属性必须是字符串类型</span></span><br><span class="line">                <span class="attr">text</span>:<span class="variable language_">this</span>.<span class="property">total</span> + <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 页面一展示，就显示徽标</span></span><br><span class="line">    <span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setTabBarBadge</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 实时监听tatal的变化，实时更改购物车的徽标</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setTabBarBadge</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在tabbar页面中使用mixins.js文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mixins <span class="keyword">from</span> <span class="string">&#x27;@/mixins/mixins.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>:[mixins]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> mixins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在uni-app中使用vuex</title>
      <link href="/uncategorized/20220620/d1715ca3/"/>
      <url>/uncategorized/20220620/d1715ca3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><h3 id="状态管理-Vuex">状态管理 Vuex</h3></blockquote><h3 id="问题">问题</h3><p>在不使用全局状态管理库时, 应用状态由组件管理, 当多个组件需要共享使用同一个应用状态时, 应用状态需要通过 props 或自定义事件在组件之间进行传递, 在组件与组件之间的关系比较疏远时, 手递手的这种传递方式显得特别混乱, 使得应用的维护变得困难.</p><p><img src="/uncategorized/20220620/d1715ca3/87.png" alt></p><p>在使用了全局状态管理库后, 需要共享的应用状态被单独存储在一个独立于组件的 Store 对象中, 所有组件可以直接从这个对象中获取状态, 省去了繁琐的组件状态传递过程. 而且当 Store 中的状态发生变化后，组件也会自动更新。</p><p><img src="/uncategorized/20220620/d1715ca3/87_1.png" alt></p><h3 id="Vuex-工作流程">Vuex 工作流程</h3><h6 id="state-用于存储应用状态-store-state">state 用于存储应用状态(store.state)</h6><h6 id="actions-用于执行异步操作，不能在此处直接修改状态，需要通过commit来调用mutations中的方法来修改state的状态-dispatch">actions 用于执行异步操作，不能在此处直接修改状态，需要通过commit来调用mutations中的方法来修改state的状态 (dispatch)</h6><h6 id="mutations-用于执行同步操作，修改state中的状态-commit">mutations 用于执行同步操作，修改state中的状态(commit)</h6><h6 id="getters-vuex中的计算属性-store-getters">getters  vuex中的计算属性(store.getters)</h6><h6 id="module-模块，用于对状态进行拆分">module 模块，用于对状态进行拆分</h6><p>在组件中开发者可以通过 dispatch 调用 Action 类型的方法执行异步操作, 当异步操作执行完成后, 在 Action 方法中可以通过 commit 调用 mutation 类型的方法修改状态, 当状态被修改以后, 视图更新.</p><p><img src="/uncategorized/20220620/d1715ca3/85.png" alt></p><p>Vuex 目前有两个版本, 一个是 <code>3.x</code>, 另一个是 <code>4.x</code>, 3.x 的版本是供 Vue2 使用的, 4.x 版本是供 Vue3 使用的.</p><blockquote><h5 id="uni-app内置了vuex，可以直接使用无需下载">uni-app内置了vuex，可以直接使用无需下载</h5></blockquote><h2 id="基于vue2-项目的根目录下创建store文件夹">(基于vue2)项目的根目录下创建store文件夹</h2><p><img src="/uncategorized/20220620/d1715ca3/2022-06-20_15-37-59.png" alt></p><p>🔥vuex入口文件：store.js</p><ul><li>导入Vue 和 Vuex</li><li>挂载Vuex插件到Vue实例上</li><li>创建vuex的Store实例，传入配置对象（modules，state，mutations，getters，actions）</li><li>导出Store实例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cart <span class="keyword">from</span> <span class="string">&#x27;./cart&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>:&#123;</span><br><span class="line">    <span class="comment">// 对象中键值一致，写一个 ES6语法 cart:cart  user:user</span></span><br><span class="line">    cart,</span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>🔥项目入口文件main.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入store.js文件</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span></span><br><span class="line"><span class="comment">// 挂载到vue实例上</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>🔥vuex购物车模块：cart.js</p><ul><li>mutations中的方法，第一个参数为state，第二个参数为传递过来的数据</li><li>在mutations中通过<code>this.commit('模块名/方法名')</code>调用mutations中的方法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//开启命名空间，隔离的内容除了state</span></span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>(&#123;</span><br><span class="line">        <span class="comment">//购物车的商品列表</span></span><br><span class="line">        <span class="attr">cartList</span>:[]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="comment">//将商品添加到购物车</span></span><br><span class="line">        <span class="title function_">addToCart</span>(<span class="params">state,goods</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 判断购物车中是否有要添加的商品</span></span><br><span class="line">            <span class="keyword">const</span> findResult = state.<span class="property">cartList</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">goods_id</span> === goods.<span class="property">goods_id</span>)</span><br><span class="line">            <span class="comment">// 2. 如果没有，就push进购车的数据列表</span></span><br><span class="line">            <span class="keyword">if</span>(!findResult) &#123;</span><br><span class="line">                state.<span class="property">cartList</span>.<span class="title function_">push</span>(goods)</span><br><span class="line">            <span class="comment">// 3. 如果有，就让商品的数量+1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                findResult.<span class="property">goods_count</span> ++</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4. 持久化存储购物车中的商品</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;cart/saveCartListToStorage&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 持久化存储购物车中的商品方法</span></span><br><span class="line">        <span class="title function_">saveCartListToStorage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;cartlist&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">cartList</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 包装器，相当于vue中的computed</span></span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="comment">// 计算购物车中选中的商品总数量</span></span><br><span class="line">        <span class="title function_">checkedCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">cartList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">goods_state</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total,x</span>)=&gt;</span>total+=x.<span class="property">goods_count</span>,<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥页面使用vuex中的state</p><ul><li>映射的时候必须指明，模块名 <code>...mapState('cart',['cartList','',''...])</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in cartList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.goods_id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">...省略页面代码    </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapState</span>(<span class="string">&#x27;cart&#x27;</span>,[<span class="string">&#x27;cartList&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>🔥页面中使用vuex中的mutations</p><ul><li>映射的时候必须指明，模块名 <code>...mapMutations('cart',['addToCart','',''...])</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">uni-goods-nav</span> <span class="attr">:fill</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span> @<span class="attr">buttonClick</span>=<span class="string">&quot;buttonClick&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;cart&#x27;</span>,[<span class="string">&#x27;addToCart&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">buttonClick</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (e.<span class="property">content</span>.<span class="property">text</span> === <span class="string">&#x27;加入购物车&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> &#123;goods_id,goods_name,goods_price,goods_small_logo&#125; = <span class="variable language_">this</span>.<span class="property">goodsInfo</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> goods = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                goods_id,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                goods_name,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">goods_count</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">goods_state</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                goods_price,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                goods_small_logo</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">addToCart</span>(goods)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>🔥页面中使用vuex的gettes</p><ul><li>映射的时候必须指明，模块名 <code>...mapGetters('cart',['checkedCount','',''...])</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn-settle&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;settle&quot;</span>&gt;</span>结算(&#123;&#123;checkedCount&#125;&#125;)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;cart&#x27;</span>,[<span class="string">&#x27;checkedCount&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目创建分支并合并分支</title>
      <link href="/uncategorized/20220620/1151339c/"/>
      <url>/uncategorized/20220620/1151339c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="以分支home和主分支master为例">以分支home和主分支master为例</h2><p>🔥创建home并切换到home分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b home</span><br></pre></td></tr></table></figure><p>🔥将代码从工作区提交到缓存区</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>🔥将缓存区代码提交到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure><p>🔥将本地分支提交到远程分支，并创建新的远程分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin home</span><br></pre></td></tr></table></figure><p>🔥切换到master/main分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>🔥拉取代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>🔥合并home分支到master</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge home</span><br></pre></td></tr></table></figure><p>🔥提交master分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>🔥删除本地home分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d home</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Symbol.iterator实现可迭代对象</title>
      <link href="/JavaScript/20220610/9e8d5402/"/>
      <url>/JavaScript/20220610/9e8d5402/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>什么是for…of</p></blockquote><p><code>for...of</code> 可遍历 Arrays（数组）, Strings（字符串）, Maps（映射）, Sets（集合）等可迭代的数据结构</p><p>🚩遍历数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> list) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(value)  <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🚩数组可用<code>for...of</code>的原因</p><ul><li>数组有<code>Symbol(Symbol.iterator): ƒ values()</code>属性</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = list[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterable)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterable.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterable.<span class="title function_">next</span>()) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterable.<span class="title function_">next</span>()) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterable.<span class="title function_">next</span>()) </span><br></pre></td></tr></table></figure><p><img src="/JavaScript/20220610/9e8d5402/2022-06-10_20-28-00.png" alt></p><p><strong>value：数组中的每一项，done：知否读取完</strong></p><p>🚩用<code>for...of</code>遍历对象，报错</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">data</span>:[<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line">用<span class="title class_">Symbol</span>.<span class="property">iterator</span>实现可迭代对象</span><br></pre></td></tr></table></figure><p><img src="/JavaScript/20220610/9e8d5402/2022-06-10_20-23-26.png" alt></p><p>🚩用Symbol.iterator实现可迭代对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> _that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">value</span>: _that.<span class="property">data</span>[nextIndex++],</span><br><span class="line">                    <span class="comment">// nextIndex没有超过obj.data.length 但会false 超过返回true</span></span><br><span class="line">                    <span class="attr">done</span>: nextIndex &gt; _that.<span class="property">data</span>.<span class="property">length</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)  <span class="comment">// zs  lisi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css让盒子水平垂直居中</title>
      <link href="/uncategorized/20220609/5b677a98/"/>
      <url>/uncategorized/20220609/5b677a98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>html代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>🔥方式一：子绝父相</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">         <span class="attribute">position</span>: relative;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">         <span class="attribute">background</span>: pink;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.son</span> &#123;</span><br><span class="line">         <span class="comment">/* 方式一 */</span></span><br><span class="line">         <span class="attribute">position</span>: absolute;</span><br><span class="line">         <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">         <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">         <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">         <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">margin</span>: auto;</span><br><span class="line">         <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">/* 方式二 */</span></span><br><span class="line">         <span class="attribute">position</span>: absolute;</span><br><span class="line">         <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">         <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">         <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">/* 方式三 使用tranfrom*/</span></span><br><span class="line">         <span class="attribute">position</span>: absolute;</span><br><span class="line">         <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">         <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">         <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>🔥方式二：flex布局</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥方式三：table-cell布局</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔥方式四：grid布局</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux忘记MySql密码后修改密码</title>
      <link href="/uncategorized/20220608/1c416769/"/>
      <url>/uncategorized/20220608/1c416769/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><h4 id="1-进入root账户">1.进入root账户</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><blockquote><h4 id="2-关闭mysql服务">2. 关闭mysql服务</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure><blockquote><h4 id="3-找到my-cnf配置文件">3. 找到my.cnf配置文件</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis my.cnf</span><br></pre></td></tr></table></figure><blockquote><h4 id="4-在-mysqld-标签下添加：skip-grant-tables">4. 在[mysqld]标签下添加：<strong>skip-grant-tables</strong></h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><blockquote><h4 id="5-启动mysql服务">5.启动mysql服务</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><blockquote><h4 id="6-不用密码登录mysql，执行下面命令以后直接回车">6.不用密码登录mysql，执行下面命令以后直接回车</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><blockquote><h4 id="7-使用数据库中的mysql库">7.使用数据库中的mysql库</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><blockquote><h4 id="8-执行sql语句更新密码">8.执行sql语句更新密码</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set password=password(&#x27;你的密码&#x27;) where User=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><blockquote><h4 id="9-刷新">9.刷新</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><h4 id="10-修改成功以后退出">10.修改成功以后退出</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><blockquote><h4 id="11-停止mysql服务">11.停止mysql服务</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure><blockquote><h4 id="12-去掉my-cnf里面的skip-grant-tables内容">12.去掉my.cnf里面的skip-grant-tables内容</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><blockquote><h4 id="13-启动mysql服务">13.启动mysql服务</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><blockquote><h4 id="13-进行登录">13.进行登录</h4></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Promise</title>
      <link href="/uncategorized/20220601/953054e4/"/>
      <url>/uncategorized/20220601/953054e4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Promise就是一个构造函数，内部有三种状态</strong>：</p><ul><li><strong>pending 等待态</strong></li><li><strong>fulfilled成功态</strong></li><li><strong>rejected 失败态</strong></li></ul><p>**最终只有一个状态：成功 / 失败 **</p><p>想要改变三个状态必须要通过resolve() 和 reject() 这俩个方法，resolve() 将pending转为fulfilled，reject() 将pending转为rejected，并将得到的数据存储在内部的data里，<strong>状态一旦转换就是不可逆的</strong></p><p><strong>Promise的原型上含有then，catch方法</strong></p><ul><li><strong>then方法可以接受俩个参数，一个成功的回调，一个失败的回调，也就是onResolved和onRejected</strong></li><li><strong>catch方法可以接受一个参数，失败的回调，也就是onRejected</strong></li><li><strong>触发then的时候，有三种可能，一个是状态为resolved时，一个状态为rejected时，一个是状态为pending时</strong></li></ul><h4 id="开始自定义实现Promise">开始自定义实现Promise</h4><ul><li><p>Promise是一个类，参数是一个函数执行器executor，且会立即执行，函数执行器接受俩个参数，一个成功回调resolve，一个失败回调reject</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;FULFILLED&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// executor 执行器 在构造函数里立刻调用</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PENDING</span>; <span class="comment">//默认等待态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>; <span class="comment">//成功的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>; <span class="comment">//失败的值</span></span><br><span class="line">        <span class="comment">// 成功回调队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallBack</span> = [];</span><br><span class="line">        <span class="comment">// 失败回调队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallBack</span> = [];</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">                <span class="comment">// 变成成功态</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">                <span class="comment">// 执行队列里的任务</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallBack</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span><span class="title function_">fn</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">                <span class="comment">// 变成失败态</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">                <span class="comment">// // 执行队列里的任务</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallBack</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span><span class="title function_">fn</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="title function_">executor</span>(resolve,reject)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原型方法</span></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled,onRejected</span>) &#123;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">            <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 失败</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">            <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功，任务进队列</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onFulfilledCallBack</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 失败，任务进队列</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onRejectedCallBack</span>.<span class="title function_">push</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Promise</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyPromise</span> = <span class="built_in">require</span>(<span class="string">&#x27;./premise.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// resolve(1)</span></span><br><span class="line">    <span class="comment">// reject(2)</span></span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,data)</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 手写Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><h3 id="小程序和普通网页开发的区别">小程序和普通网页开发的区别</h3><ul><li>运行环境的不同<ul><li>网页运行在浏览器</li><li>小程序运行在微信环境</li></ul></li><li>API不同<ul><li>小程序无法调用DOM和BOM的API</li><li>小程序可以调用微信提供的一些API<ul><li>地理定位</li><li>扫码</li><li>支付…</li></ul></li></ul></li><li>开发模式不同<ul><li>网页的开发模式：浏览器+代码编辑器</li><li>小程序的开发模式：<ul><li>申请小程序开发账号</li><li>安装小程序的开发者工具</li><li>创建和配置小程序项目</li></ul></li></ul></li></ul><hr><h3 id="小程序代码的构成">小程序代码的构成</h3><h4 id="一、项目的基本组成结构">一、项目的基本组成结构</h4><ul><li>pages 存放所有小程序的页面，每个页面都是一个单独的文件夹</li><li>utils 存放工具性质的模块</li><li>app.js 整个小程序项目的入口文件</li><li>app.json 小程序项目的全局配置文件</li><li>app.wxss小程序项目的全局样式文件</li><li>project.config.json项目的配置文件</li><li>sitemap.json  seo优化，用来配置小程序及其页面是否允许被微信索引（是都可以被搜索到）</li></ul><h4 id="二、小程序页面的组成部分">二、小程序页面的组成部分</h4><p><em><strong>建议把所有小程序的页面，都放在pages目录里，以单独的文件夹存在</strong></em></p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/1653915376124.png" alt></p><p>每个页面由4个基本文件组成</p><ol><li>.js文件，页面的脚本文件，存放页面的数据，事件处理函数等</li><li>.json文件，当前页面的配置文件，配置窗口的外观，表现等</li><li>.wxml文件，页面的模板结构文件</li><li>.wxss文件，当前页面的样式表文件</li></ol><h4 id="三、json配置文件">三、json配置文件</h4><p>json是一种数据格式，在实际开发中，json总是以配置文件的形式出现，小程序项目中有4种json配置文件，分别是：</p><ol><li><h5 id="项目根目录-app-json">项目根目录 app.json</h5><p>app.json是当前小程序的<strong>全局配置</strong>，包括了小程序的所有页面路径、窗口外观、页面表现、底部tab</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/1653916311716.png" alt></p><ul><li>pages ：用来记录当前小程序所有页面的路径</li><li>window ：全局定义 小程序所有页面的背景色、文字颜色等</li><li>style ：全局定义小程序组件所使用的样式版本</li><li>sitemapLocation ：用来指明 sitemap.json 的位置</li></ul></li><li><h5 id="项目根目录-project-config-json">项目根目录 project.config.json</h5><p>project.config.json是项目配置文件，记录我们对小程序开发工具所做的个性化配置</p><ul><li>setting 保存了编译相关的配置</li><li>projectname 保存的是项目名称</li><li>appid保存的是小程序的账号ID</li></ul><p>project.config.json更多的是对微信开发者工具的配置，而app.json是对项目代码功能层面的配置</p></li><li><h5 id="项目根目录-sitemap-json">项目根目录 sitemap.json</h5><p>当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中</p><p>***注意：***sitemap 的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件 project.config.json 的 setting 中配置字段 checkSiteMap 为 false（若没有checkSiteMap配置，可以自行添加）</p></li><li><h5 id="每个页面文件夹中的-json">每个页面文件夹中的 .json</h5><p>.json 文件来对本页面的窗口外观进行配置，<strong>页面中的配置项会覆盖 app.json 的 window 中相同的配置项</strong></p></li></ol><h4 id="四、新建小程序页面">四、新建小程序页面</h4><p>在 app.json-&gt;pages 中新增页面的存放路径，小程序开发中工具就可帮我们自动创建对应的页面文件</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/1653917026203.png" alt></p><h4 id="五、修改项目首页">五、修改项目首页</h4><p>只需要调整 app.json -&gt; pages 数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在</p><p>第一位的页面，当作项目首页进行渲染。</p><h4 id="六、wxml-和-html-的区别">六、wxml 和 html 的区别</h4><p>wxml是小程序的标签语言，用来构建小程序页面的结构 类似于html，主要有以下区别：</p><ol><li>标签名不同<ul><li>HTML（div）</li><li>WXML（view，text、image、navigator）</li></ul></li><li>属性节点不同<ul><li><code>&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;</code></li><li><code>&lt;navigator url=&quot;&quot;&gt;&lt;/navigator&gt;</code></li></ul></li><li>提供了类似于vue中的模板语法<ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li></ul></li></ol><h4 id="七、wxss-和-css的区别">七、wxss 和 css的区别</h4><p>wxss（weixin style sheets）是一套样式语言，用于描述wxml的组件样式，类似于css，主要有以下区别</p><ol><li>新增了rpx单位<ul><li>css中需要手动设置像素单位换算，例如rem</li><li>wxss的rpx，在不同大小的屏幕上小程序会自动进行换算</li></ul></li><li>提供了全局样式和局部样式<ul><li>项目根目录中的app.wxss会作用于所有小程序页面</li><li>局部页面 .wxss样式仅对当前页面生效</li></ul></li><li>wxss仅支持部分css选择器<ul><li><code>.class</code> 和 <code>#id</code></li><li><code>element</code></li><li>并集选择器，后代选择器</li><li><code>::affer</code> 和<code>::before</code>等伪类选择器</li></ul></li></ol><h4 id="八、js文件的分类">八、js文件的分类</h4><ol><li>app.js 是整个小程序项目的入口文件，通过调用App()函数来启动整个小程序</li><li>页面的 .js 文件 是页面的入口文件，通过调用Page()函数来创建并运行页面</li><li>普通的 .js 文件，用来封装公共的函数或属性供页面使用</li></ol><hr><h3 id="小程序的宿主环境">小程序的宿主环境</h3><h4 id="一、宿主环境">一、宿主环境</h4><p>宿主环境（host environment）指的是程序运行所<strong>必须的依赖环境</strong>。例如：</p><p>Android 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行</p><p>的，所以Android 是安卓软件的宿主环境，脱离了宿主环境的软件是没有任何意义的！</p><p><strong>手机微信</strong>是小程序的宿主环境，如图所示：</p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/1653924260937.png" alt></p><p>小程序借助宿主环境提供的能力，可以完成许多普通网页无法完成的功能，例如： 微信扫码、微信支付、微信登录、地理定位…</p><p>小程序的宿主环境包含以下几部分内容</p><p>① 通信模型</p><ul><li><p>渲染层和逻辑层之间的通信</p><ul><li>WXML 模板和 WXSS 样式工作在渲染层</li><li>js脚本工作在逻辑层</li></ul></li><li><p>逻辑层和第三方服务器之间的通信</p><p><strong>这两部分的通信都是通过微信客户端进行转发</strong></p><p><img src="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20220531/4618cb0a/1653924713540.png" alt></p></li></ul><p>② 运行机制</p><ul><li>小程序的启动过程<ul><li>把小程序的代码包下载到本地</li><li>解析app.json全局配置文件</li><li>执行app.js小程序入口文件，<strong>调用App()创建小程序实例</strong></li><li>渲染小程序首页</li><li>小程序启动完成</li></ul></li><li>某个页面渲染的过程<ul><li>加载解析页面的.json配置文件</li><li>加载页面的.wxml模板和.wxss样式</li><li>执行页面的.js文件，<strong>调用Page()创建页面实例</strong></li><li>页面渲染完成</li></ul></li></ul><p>③ 组件</p><p><strong>小程序中的组件也是由宿主环境提供的</strong> 共有9大类</p><ul><li><p>视图容器</p><ul><li><p>view</p><ul><li>普通视图区域，类似于HTML中的div，是块级元素</li></ul></li><li><p>scroll-view</p><ul><li><p>可滚动的视图区域</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>scroll-x</td><td>boolean</td><td>false</td><td>否</td><td>允许横向滚动</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>scroll-y</td><td>boolean</td><td>false</td><td>否</td><td>允许纵向滚动</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table></li></ul></li><li><p>swiper和swiper-item</p><ul><li><p>轮播图容器组件和轮播图item组件</p><table><thead><tr><th style="text-align:left">属性</th><th>类型</th><th style="text-align:center">默认值</th><th style="text-align:center">必填</th><th style="text-align:left">说明</th><th></th></tr></thead><tbody><tr><td style="text-align:left">indicator-dots</td><td>boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:left">是否显示面板指示点</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:left">indicator-color</td><td>color</td><td style="text-align:center">rgba(0, 0, 0, .3)</td><td style="text-align:center">否</td><td style="text-align:left">指示点颜色</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td style="text-align:left">indicator-active-color</td><td>color</td><td style="text-align:center">#000000</td><td style="text-align:center">否</td><td style="text-align:left">当前选中的指示点颜色</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td style="text-align:left">autoplay</td><td>boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:left">是否自动切换</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:left">current</td><td>number</td><td style="text-align:center">0</td><td style="text-align:center">否</td><td style="text-align:left">当前所在滑块的 index（滑块起始位置）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:left">interval</td><td>number</td><td style="text-align:center">5000（毫秒）</td><td style="text-align:center">否</td><td style="text-align:left">自动切换时间间隔</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:left">duration</td><td>number</td><td style="text-align:center">500</td><td style="text-align:center">否</td><td style="text-align:left">滑动动画时长</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td style="text-align:left">circular</td><td>boolean</td><td style="text-align:center">false</td><td style="text-align:center">否</td><td style="text-align:left">是否采用衔接滑动</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table></li></ul></li></ul></li><li><p>基础内容</p><ul><li><p>text</p><p>文本组件，相当于HTML中的span，行内元素</p><p>selectable 实现手机上<strong>长按选中文本内容</strong></p></li><li><p>rich-text</p><p>富文本组件，支持吧HTML字符串渲染为wxml结构</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>nodes</td><td>array/string</td><td>[]</td><td>否</td><td>节点列表/HTML String</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr></tbody></table><p><code>&lt;rich-text nodes=&quot;&lt;h1 style='color:#c2c2c2'&gt;标题&lt;/h1&gt;&quot;&gt;&lt;/rich-text&gt;</code></p></li></ul></li><li><p>表单组件</p><ul><li><p>button</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>size</td><td>string</td><td>default</td><td>否</td><td>按钮的大小</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>type</td><td>string</td><td>default</td><td>否</td><td>按钮的样式类型</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>plain</td><td>boolean</td><td>false</td><td>否</td><td>按钮是否镂空，背景色透明</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>disabled</td><td>boolean</td><td>false</td><td>否</td><td>是否禁用</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>loading</td><td>boolean</td><td>false</td><td>否</td><td>名称前是否带 loading 图标</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table></li><li><p>image</p><p><em><strong>注意：是image不是img，通过src指明图片的路径</strong></em></p><ul><li>默认宽：320px  高：240px</li><li>mode 属性，控制图片的裁剪和缩放形式，具体的可选值如下</li></ul><table><thead><tr><th>合法值</th><th>说明</th></tr></thead><tbody><tr><td>scaleToFill</td><td>缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td></tr><tr><td>aspectFit</td><td>缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td></tr><tr><td>aspectFill</td><td>缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td></tr><tr><td>widthFix</td><td>缩放模式，宽度不变，高度自动变化，保持原图宽高比不变</td></tr><tr><td>heightFix</td><td>缩放模式，高度不变，宽度自动变化，保持原图宽高比不</td></tr></tbody></table></li></ul></li><li><p>导航组件</p></li><li><p>map 地图组件</p></li><li><p>canvas 画布组件</p></li><li><p>开放能力</p></li><li><p>无障碍访问</p></li></ul><p>④ API</p><p><strong>小程序中的API也是由宿主环境提供的</strong>，例如：获取用户信息、本地存储、支付功能…</p><ol><li><h6 id="事件监听API">事件监听API</h6><ul><li>特点：以on开头，用来监听某些事件的触发</li></ul></li><li><h6 id="同步API">同步API</h6><ul><li>特点1：以sync结尾的API都是同步API</li><li>特点2：同步 API 的执行结果，可以通过函数返回值直接获取</li></ul></li><li><h6 id="异步API">异步API</h6><ul><li><p>特点：类似于 jQuery 中的 $.ajax(options) 函数，需要通过 success、fail、complete 接收调</p><p>用的结果</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础知识点二</title>
      <link href="/uncategorized/20220526/b6826040/"/>
      <url>/uncategorized/20220526/b6826040/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="一、数组的基本操作">一、数组的基本操作</h5><ol><li><p>作用: 保存多份任意数据</p></li><li><p>定义数组的语法:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字面量创建数组</span><br><span class="line">   <span class="keyword">var</span> arr = [数据<span class="number">1</span>，数据<span class="number">2</span>，数据<span class="number">3</span>，....数据n]  <span class="comment">//  arr是数组名字   </span></span><br><span class="line"></span><br><span class="line">构造函数创建数组</span><br><span class="line">   <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>() </span><br><span class="line">   注意:  <span class="number">1.</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>) 创建一个长度为<span class="number">10</span>的空数组</span><br><span class="line">         <span class="number">2.</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>) 创建一个长度为<span class="number">3</span>的数组</span><br></pre></td></tr></table></figure></li><li><p>数组长度：数组中成员个数   数组名.length</p></li><li><p>下标/索引：数组下标从0开始</p></li><li><p>获取数组中数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组名[下标]</span><br><span class="line">数组最后一项：数组名[数组名.<span class="property">length</span> -<span class="number">1</span>],为啥减<span class="number">1</span>？ 下标从<span class="number">0</span>开始</span><br></pre></td></tr></table></figure></li><li><p>新增数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  arr[<span class="number">5</span>]=数据 (数组名[下标] = 数据)   </span><br><span class="line">  数组名[数组名.<span class="property">length</span>]=数据</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    arr[下标]=新数据</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]   数组名.<span class="property">length</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>数组的遍历</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++  ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i] )</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>多维数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">二维数组[[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">30</span>,<span class="number">40</span>]]</span><br><span class="line">三维数组[[[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">40</span>,<span class="number">50</span>]],[[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">40</span>,<span class="number">50</span>]]]</span><br><span class="line">...  多维数组</span><br><span class="line"></span><br><span class="line"><span class="title function_">flat</span>(n)  可以把n维数组转一维数组    </span><br><span class="line">语法： 数组名.<span class="title function_">flat</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ol><h5 id="二、函数的定义和函数的参数">二、函数的定义和函数的参数</h5><ul><li>作用：封装代码,代码复用</li></ul><ol><li><p>函数的命名</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">语法: </span><br><span class="line"><span class="keyword">function</span> 函数名 () &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数表达式/匿名函数</span><br><span class="line"> <span class="keyword">var</span> 函数名 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 函数体</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">注意： 函数名建议动词开头，驼峰命名 getSum  getNum.... </span><br></pre></td></tr></table></figure></li><li><p>函数的调用:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure></li><li><p>参数： 形参和实参</p><p><em><strong>注意</strong></em>：</p><ul><li>函数的形参和实参是一一对应的</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">形参：参数<span class="number">1</span>，参数<span class="number">2</span>，参数<span class="number">3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (参数<span class="number">1</span>，参数<span class="number">2</span>，参数<span class="number">3.</span>....参数n) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">调用传实参:</span><br><span class="line"><span class="title function_">fn</span>(实参<span class="number">1</span>，实参<span class="number">2</span>，实参<span class="number">3.</span>.....实参n);</span><br></pre></td></tr></table></figure></li><li><p>arguments</p><ul><li>解决的问题：当函数的形参个数不确定</li><li>通过arguments 拿到所有参数</li><li>arguments 是伪数组,可以遍历，可以通过下标访问数据</li></ul></li><li><p>函数的返回值: return</p><ul><li>return 任意数据类型</li><li>return 语句后面的代码都不会执行</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 (形参<span class="number">1</span>,形参<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> 数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数四要素:</p><ul><li><ol><li>参数   2. 返回值    3. 功能   4. 何时调用</li></ol></li></ul></li></ol><h5 id="三、对象">三、对象</h5><ul><li><p>作用: 保存多个信息</p><p>***注意：***对象的值可以是任意数据类型，可以是函数</p></li></ul><ol><li><p>定义对象的四种语法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字面量创建对象</span><br><span class="line">    <span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">        键名<span class="number">1</span>：值<span class="number">1</span>,</span><br><span class="line">        键名<span class="number">2</span>:值<span class="number">2</span></span><br><span class="line">        ....</span><br><span class="line">        键名n：值n</span><br><span class="line">    &#125;</span><br><span class="line">构造函数创建对象</span><br><span class="line">    <span class="keyword">var</span> 对象名 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    对象名.属性名<span class="number">1</span>= 值<span class="number">1</span></span><br><span class="line">    对象名.属性名<span class="number">2</span>= 值<span class="number">2</span></span><br><span class="line"></span><br><span class="line">工厂函数创建对象</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">create</span> (参数<span class="number">1</span>，参数<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        o.属性<span class="number">1</span> = 参数<span class="number">1</span>；</span><br><span class="line">        o.属性<span class="number">2</span> = 参数<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">工厂函数：解决重复创建对象的问题，但是带来新问题,无法通过instancof 校验 对象是谁创建出的       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自定义构造函数创建对象</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Creator</span> (形参<span class="number">1</span>，形参<span class="number">2</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.属性<span class="number">1</span> = 形参<span class="number">1</span>；</span><br><span class="line">           <span class="variable language_">this</span>.属性n = 形参n</span><br><span class="line">      &#125;</span><br><span class="line">自定义构造函数解决了   通过<span class="keyword">instanceof</span>校验对象实例是谁创建的</span><br></pre></td></tr></table></figure></li><li><p>访问对象属性:</p><ul><li>对象名.属性名</li><li>对象名[‘属性名’]</li><li>对象名[变量]</li></ul></li><li><p>对象解构</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;属性名<span class="number">1</span>，属性名<span class="number">2.</span>....属性名n&#125; = 对象名</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;name,age&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)  <span class="comment">// &#x27;zhangsan&#x27; 18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">stu</span>: &#123;<span class="attr">love</span>: <span class="string">&#x27;coding&#x27;</span>, <span class="attr">info</span>:&#123;<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;name,age,<span class="attr">stu</span>:&#123;love,<span class="attr">info</span>:&#123;gender&#125;&#125;&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,love,gender)  <span class="comment">// 张三 18 coding 男</span></span><br></pre></td></tr></table></figure></li><li><p>delete 删除对象上的属性</p><p><code>deldete.obj.age</code></p></li><li><p>访问对象中的键</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方式一</span><br><span class="line">for in 遍历对象 console.log(key)</span><br><span class="line"></span><br><span class="line">// 方式二</span><br><span class="line">Object.keys(obj)</span><br><span class="line">得到的是一个Array数组</span><br></pre></td></tr></table></figure></li><li><p>访问对象中的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for in 遍历对象 console.log(obj[key])</span><br><span class="line"></span><br><span class="line">Object.values(obj) // 以数组存放</span><br></pre></td></tr></table></figure></li><li><p>访问对象的键和值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    &#x27;name&#x27;:&#x27;zhangsan&#x27;,</span><br><span class="line">    &#x27;age&#x27;:18</span><br><span class="line">&#125;</span><br><span class="line">var &#123;name,age&#125; = obj</span><br><span class="line">console.log(Object.entries(obj))</span><br><span class="line"></span><br><span class="line">打印结果：[Array(2), Array(2)]</span><br><span class="line">0: (2) [&#x27;name&#x27;, &#x27;zhangsan&#x27;]</span><br><span class="line">1: (2) [&#x27;age&#x27;, 18]</span><br></pre></td></tr></table></figure></li></ol><h5 id="四、数组常用方法">四、数组常用方法</h5><ol><li><p>增加数据:</p><ul><li><p>从前加 unshift()</p><p><code>var r = 数组名.unshift(数据);</code></p></li><li><p>从后加 push()</p><p><code>var r = 数组名.push(数据);</code></p></li></ul><p><em><strong>共性：返回值r都是数组最新的长度</strong></em></p><p>***注意：***1. push 可以从后添加多条数据  2. unshift 可以从前添加多条数据</p></li><li><p>删除数据</p><ul><li><p>从前删除一项数据 shift()</p><p><code>var r = 数组名.shift()</code></p></li><li><p>从后删除一项数据 pop()</p><p><code>var r = 数组名.pop()</code></p></li></ul><p><em><strong>共性：返回值是删除的数据</strong></em></p></li><li><p>splice: 实现增删改  <strong>会修改原数组</strong></p><ul><li><p>新增：</p><ol><li><p>数组名.splice(参数1,0,参数3);</p><p>参数1：开始操作的下标</p><p>参数2：0表示新增，</p><p>参数3：是新增数据</p></li><li><p>例子</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;张三&#x27;</span>) 是在下标<span class="number">1</span> 的位置 新增一个数据‘张三’  <span class="comment">// 参数三可以个多个数据</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>]</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="string">&#x27;张三&#x27;</span>)  <span class="comment">// arr= [1, 100, &quot;张三&quot;, 5, 8, 9, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>删除:</p><ol><li><p>数组名.splice(参数1,参数2);</p><p>参数1：开始操作的下标</p><p>参数2：大于0的正数，表示要删除几个数据</p></li><li><p>返回值：删除的那项数据</p></li><li><p>例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">50</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">70</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> r = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)  <span class="comment">//  [50, 4]  数组存放</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>修改:</p><ol><li><p>数组名.splice(参数1,参数2,参数3);</p><p>参数1：开始操作的下标</p><p>参数2：大于0的正数，表示要修改几个数据</p><p>参数3：新增的数据</p><p><em><strong>注意：参数2和参数3数量一一对应</strong></em></p></li><li><p>返回值：被替换掉的数据</p></li><li><p>例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">50</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">70</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [10, &#x27;a&#x27;, &#x27;b&#x27;, 2, 70, 3]</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>slice: 截取数组中的数据</p><p><em><strong>返回值是截取的数据，以数组的形式存放</strong></em></p><p><em><strong>slice不会修改原数组</strong></em></p><ul><li>数据名.slice(参数1，参数2);<ul><li>slice(参数) 下标从参数开始截取到数组最后一项</li><li>slice(参数1，参数2) 截取数组，[参数,end) 包头不包尾</li></ul></li></ul></li><li><p>indexOf  查找数组中某项数据的在数组中下标</p><ul><li>语法： 数组名.indexOf(数据)</li><li>判断该数据在数组中是否存在 返回值&gt;=0 -&gt;存在</li><li>否则 返回-1  表示数组中不存在该数据</li></ul></li><li><p>es6:  includes</p><ul><li>判断数组中是否包含该数据  返回值是true 说明 数组中有该数据  返回值是false 说明数组中不包含该数据</li></ul></li><li><p>indexOf() 和 includes() 区别</p><ul><li>includes() 可以严格校验， 比如NaN 如果数组中有NaN 则返回true</li><li>indexOf() 做不到</li></ul></li><li><p>reverse()  翻转数组</p><p><code>数组名.reverse()</code></p></li><li><p>concat() 拼接俩个数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">concat</span>()属性  拼接俩个数组</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">100</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">90</span>,<span class="number">98</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;八戒&#x27;</span>,<span class="string">&#x27;妖怪&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr1.<span class="title function_">concat</span>(arr2,arr3) <span class="comment">// concat() 可以拼接多个数组</span></span><br></pre></td></tr></table></figure></li><li><p>数组去重</p><ul><li><p>方式一</p><p>创建一个新数组，遍历旧数组，判断（indexOf 或者 includes ）值不在新数组里就push进新数组 最终返回新数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">50</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">70</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;arr.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!newArr.<span class="title function_">includes</span>(arr[i])) &#123;</span><br><span class="line">       newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure></li><li><p>方式二 new Set</p><p><code>new Set（数组）  // 得到的是一个set对象  通过Array.from()转成数组</code></p></li></ul></li><li><p>数组排序 sort()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="property">sort</span> (<span class="keyword">function</span> (<span class="params">a,b</span>) &#123;</span><br><span class="line">    从大到小排列</span><br><span class="line">    <span class="keyword">return</span> b - a</span><br><span class="line">    </span><br><span class="line">    从小到大排列</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数组转字符串</p><p>数组.join(分隔符)</p></li></ol><h5 id="五、字符串">五、字符串</h5><ol><li><p>字符串的长度  length</p></li><li><p>访问字符串  访问下标，下标从0开始</p></li><li><p>字符串的遍历  for循环</p></li><li><p>字符串的不可变性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = ’张三‘</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&#x27;王&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) -&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">不能通过下标去更改字符串的内容，字符串并不是一直都不能被修改，给字符串重新赋值就会修改</span><br></pre></td></tr></table></figure></li><li><p>字符串截取</p><ul><li>变量名.substring[start,end)</li><li>变量名.slice[start,end)</li><li>变量名.substr(start,length)</li></ul><p><em><strong>共同作用: 截取字符串，不会修改原值</strong></em></p><p><em><strong>区别：1.substring[start,end) 和 slice [start,end) 包头不包尾   2.substr(start,length) 从start开始，往后截取length个数据</strong></em></p></li><li><p>转大写  转小写</p><ul><li>转大写  字符串.toUpperCase();</li><li>转小写  字符串.toLowerCase();</li></ul></li><li><p>字符串的替换</p><p>字符串.replace(参数1，参数2); 用参数2 替换参数1</p><p><em><strong>只会替换满足条件的第一项，不会修改原数组</strong></em></p></li><li><p>去除空格</p><p>字符串.trim()   只是去除的字符串俩边的空格</p></li><li><p>字符串转数组</p><p>字符串.split(分隔符)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;san&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>))  <span class="comment">// [&#x27;s&#x27;, &#x27;a&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;san-zhang&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)) <span class="comment">// [&#x27;san&#x27;, &#x27;zhang&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>字符串的+ - / * 运算</p><p>只包含字母的字符串和数字 ±/*  除了+ 做拼接，其余结果全是NaN</p></li><li><p>charAt(index)</p><p>返回指定位置的字符</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">let</span> r = str.<span class="title function_">charAt</span>(<span class="number">0</span>)  参数是对元素对应的下标</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r) -&gt; <span class="string">&#x27;h&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="六、new关键字的执行过程">六、new关键字的执行过程</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>在内存中创建一个空对象</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>让<span class="variable language_">this</span>指向创建出来的空对象</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>执行函数的代码，给这个新对象添加属性和方法</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>返回这个新对象（所以构造函数里面不需要<span class="keyword">return</span>）</span><br></pre></td></tr></table></figure><h5 id="七、伪数组">七、伪数组</h5><ol><li>具有数组的length属性，可以进行遍历  除此之外，数组的其他方法，伪数组都不适用</li><li>伪数组转数组：Array.from(伪数组名)</li></ol><h5 id="八、Object-is-比较俩个数据是否相等">八、<a href="http://Object.is">Object.is</a>() 比较俩个数据是否相等</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(参数一，参数二) 是严格校验 ，比===还严格， </span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>) 返回<span class="literal">true</span></span><br><span class="line"><span class="title class_">NaN</span> == <span class="title class_">NaN</span>  -&gt; <span class="literal">false</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> -&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="九、内置对象">九、内置对象</h5><ol><li><p>时间内置对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let time = new.Date()</span><br><span class="line">获取年 time.getFullYear()</span><br><span class="line">    获取月 time.getMonth()+1 //月份从0开始，获取当前月份需要 + 1</span><br><span class="line">    获取日 time.getDate()</span><br><span class="line">    获取星期 time.getDay()</span><br><span class="line">    获取时 time.getHours()</span><br><span class="line">    获取分 time.getMinutes()</span><br><span class="line">    获取秒 time.getSecounds()</span><br><span class="line">    获取时间戳  1. time.getTime()</span><br><span class="line">        2. +time</span><br><span class="line">            3.Date.now()</span><br><span class="line">            4.time.valueOf()</span><br></pre></td></tr></table></figure></li><li><p>Math内置对象</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() 产生一个<span class="number">0</span>-<span class="number">1</span>之间的随机小数 [<span class="number">0</span>,<span class="number">1</span>）</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() 向下取整</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>() 向上取整</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() 四舍五入</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">80</span>) 找最大数</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>) 找最小数</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(num,<span class="number">2</span>) -&gt; 指的是 num的平方</span><br><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span> 获取圆周率                              </span><br><span class="line">   </span><br><span class="line">                                  </span><br><span class="line">                                  </span><br><span class="line">获取n-m之间的随机整数</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(m-n+<span class="number">1</span>)+n)</span><br></pre></td></tr></table></figure><h5 id="十、合并俩个数组">十、合并俩个数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一： es6的展开运算符 [...]</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">100</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">20</span>,<span class="number">30</span>,<span class="number">60</span>,<span class="number">90</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> r = [...arr1,...arr2]   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二 concat</span></span><br><span class="line"><span class="keyword">var</span> r = arr1.<span class="title function_">concat</span>(arr2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础知识点一</title>
      <link href="/uncategorized/20220526/8d024ee9/"/>
      <url>/uncategorized/20220526/8d024ee9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="一、js简介">一、js简介:</h5><p>javaScript是一种客户端脚本语言，由浏览器解释执行</p><h5 id="二、JavaScript-组成：">二、JavaScript 组成：</h5><ol><li>ECMAScript 核心语法</li><li>DOM 文档对象模型</li><li>BOM 浏览器对象模型</li></ol><h5 id="三、前端Web技术的组成">三、前端Web技术的组成</h5><p>HTML CSS JavaScript</p><ol><li>HTML 是一种标记语言，用来结构化我们的网页内容并赋予内容含义</li><li>CSS 是一种样式规则语言，可将样式 应用于HTML内容</li><li>JavaScript 是一种脚本语言，可以用来创建动态更新的内容</li></ol><h5 id="四、js的使用方式">四、js的使用方式</h5><ol><li>使用<code>&lt;script&gt;&lt;/script&gt;</code>标签内部样式</li><li>使用外部js文件</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;my.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="五、js变量命名规范">五、js变量命名规范</h5><ol><li>概念： 变量是容器，用来存储数据<br>语法: var 变量名 = 数据;</li><li>变量名命名规则：<ol><li>a-zA-Z,_ $ 数字0-9 组成</li><li>不能以数字开头</li><li>不能以关键字(var,for if ),保留字(class)作为变量名</li><li>命名有意义</li><li>驼峰命名，例如getName</li></ol></li></ol><h5 id="六、js数据类型">六、js数据类型</h5><ol><li>基本数据类型<ul><li>number  boolean  string  undefined null</li></ul></li><li>复杂数据类型<ul><li>Object Array  function</li></ul></li></ol><h5 id="七、数据类型判断">七、数据类型判断</h5><ol><li><p>typeof</p><ul><li>优点：能够快速区分基本数据类型</li><li>缺点：不能将Object、Array、Null区分，都返回object</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;mc&#x27;</span>);            <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>)           <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="title function_">log</span>());   <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);              <span class="comment">// object </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>instanceof</p><ul><li>能够区分Array、Object和function</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);                   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="八、运算符">八、运算符</h5><ol><li><p>算数运算符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ - * / %</span><br><span class="line"></span><br><span class="line">发生隐式转换: </span><br><span class="line">+运算 </span><br><span class="line">1. number + string -&gt; 拼接   number转字符串</span><br><span class="line">2. number + boolean -&gt; 加运算  boolean转number</span><br><span class="line"></span><br><span class="line">-运算</span><br><span class="line">1. number - string -&gt;减运算   string转number</span><br><span class="line">2. number - boolean -&gt; 减运算  boolean转number</span><br><span class="line"></span><br><span class="line">* / % 同上同理</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按照优先级：! &amp;&amp; || </span><br></pre></td></tr></table></figure></li><li><p>赋值运算符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+=   -=   *=   /=    %=</span><br></pre></td></tr></table></figure></li><li><p>比较运算符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  &lt;   &gt;=   &lt;=   </span><br><span class="line">== （只要数据内容相同）</span><br><span class="line">=== 全等判断(1. 数据类型相同   2.数据内容相同)</span><br><span class="line">!= 不等</span><br><span class="line">!== 不等(严格判断)</span><br></pre></td></tr></table></figure></li><li><p>自增自减</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前置++  后置++  前置--  后置--</span><br><span class="line"></span><br><span class="line">后置加，看前面是否有逻辑运算符， 如果有，就先赋值，后自增 </span><br><span class="line">例如：var a = 10;   a++; =&gt; 10   a; =&gt;11</span><br></pre></td></tr></table></figure></li><li><p>NaN 不等于任何值，包括自身</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">null == undefined -&gt;  true</span><br><span class="line">null === undefined -&gt; false</span><br></pre></td></tr></table></figure></li></ol><h5 id="九、数据类型转换">九、数据类型转换</h5><ol><li>字符串转数字</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="title class_">Number</span>(‘<span class="number">100</span>’)=&gt; <span class="number">100</span>   <span class="string">&#x27;100a&#x27;</span> - &gt; <span class="title class_">NaN</span>  </span><br><span class="line">只能转数字，不能转非数字，遇到非数字就是<span class="title class_">NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;&#x27;</span>) -&gt; <span class="number">0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>) -&gt; <span class="number">0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>) -&gt; <span class="title class_">NaN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="built_in">parseInt</span>(<span class="string">&#x27;100a&#x27;</span>) -&gt; <span class="number">100</span>  <span class="string">&#x27;100.97abc&#x27;</span> - &gt; <span class="number">100</span>   ‘abc100’ -&gt; <span class="title class_">NaN</span> </span><br><span class="line">可以转非数字，但是开头不能是非数字，只保留整数部分</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;&#x27;</span>) -&gt; <span class="title class_">NaN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="built_in">parseFloat</span>(<span class="string">&#x27;100.97abc&#x27;</span>) -&gt; <span class="number">100.97</span>   ‘abc100’ -&gt; <span class="title class_">NaN</span></span><br><span class="line">可以转非数字，但是开头不能是非数字，可以保留到小数部分  </span><br><span class="line">遇到第二个小数点时，无效，就算后面有数字也不会再转，</span><br><span class="line"> <span class="built_in">parseFloat</span>(<span class="string">&#x27;&#x27;</span>) -&gt; <span class="title class_">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> +  *  /     </span><br><span class="line">+<span class="string">&#x27;100&#x27;</span> -&gt; <span class="number">100</span>  <span class="string">&#x27;100&#x27;</span>*<span class="number">1</span> -&gt; <span class="number">100</span> <span class="string">&#x27;100&#x27;</span>/<span class="number">1</span> -&gt; <span class="number">100</span>  </span><br><span class="line">注意: 只要以非数字开头，结果都是<span class="title class_">NaN</span></span><br></pre></td></tr></table></figure><ol start="2"><li>数字转字符串</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toString()  String()</span><br><span class="line"></span><br><span class="line">toString()的使用方法： var a = 10； a.toString() -&gt; &#x27;10&#x27;</span><br><span class="line">String()的使用方法 String(&#x27;10&#x27;) -&gt; 10</span><br><span class="line"></span><br><span class="line">NaN 和 undefined 不能用toString转字符串，只能通过String方法转</span><br></pre></td></tr></table></figure><h5 id="十、if-条件分支">十、if 条件分支</h5><ul><li><p>表达式为false的六种情况</p><ol><li>0 (数字0，字符串 ‘0’ 的布尔值为true)</li><li>null (代表空值)</li><li>undefined (未定义)</li><li>false (布尔值的false，字符串的 ‘false’ 的布尔值为true)</li><li>NaN（无法计算结果时出现，表示&quot;非数值&quot;；但是typeof NaN===“number”）</li><li>‘’ 或 “” （<strong>空字符串，中间有空格时也是true</strong>）</li></ol><p><strong>注意空数组空对象，负值转的布尔值时都为true</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">语法： </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句块,只有条件成立，才会执行</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句块,只有条件成立，才会执行</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句块,<span class="keyword">if</span>条件成立，执行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123; 语句<span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>) &#123;语句<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;语句<span class="number">3</span>&#125;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">else</span> &#123;&#125;</span><br><span class="line">表达式<span class="number">1</span>成立，执行语句<span class="number">1</span>， 表达式<span class="number">2</span>成立，执行语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意: 条件表达式的值为 <span class="literal">true</span> 或者 <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="十一、三元表达式">十一、三元表达式</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">表达<span class="number">1</span> ? 语句<span class="number">1</span> ： 语句<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">表达式<span class="number">1</span>成立 执行语句<span class="number">1</span>，否则执行语句<span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="十二、switch">十二、switch</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">        语句<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     .... </span><br><span class="line">     <span class="attr">default</span>:</span><br><span class="line">        默认语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">switch</span>中的表达式和 <span class="keyword">case</span>后面的值 是做全等判断</span><br><span class="line"><span class="number">2.</span> 只要有一个<span class="keyword">case</span>命中，后面的<span class="keyword">case</span>就不会执行</span><br><span class="line"><span class="number">3.</span> 若没有<span class="keyword">break</span> 就会一直往下执行 直到遇到<span class="keyword">break</span></span><br></pre></td></tr></table></figure><h5 id></h5>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/uncategorized/20220524/4a17b156/"/>
      <url>/uncategorized/20220524/4a17b156/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
